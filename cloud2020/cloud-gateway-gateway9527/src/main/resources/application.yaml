server:
  port: 9527

spring:
  application:
    name: cloud-gateway-service
  cloud:
    gateway:
      discovery:
        locator:
          # spring.cloud.gateway.discovery.locator.enabled：是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。
          # spring.cloud.gateway.discovery.locator.lowerCaseServiceId：是将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了）。
          enabled: true
          lower-case-service-id: true
      routes:
        - id: payment_route1
          # uri: http://localhost:8001
          uri: lb://cloud-payment-service # 表示不是直接的地址，而是负载均衡的，需要去注册中心找
          predicates:
#            - After=2023-02-06T14:13:31.798+08:00[Asia/Shanghai] # 在此时间后该路由才会生效,但是enable=true（地址中有服务名的）的访问方式依旧可用
#            - Before=2023-05-06T14:13:31.798+08:00[Asia/Shanghai] # 同上enable
#            - Between=2023-02-06T14:13:31.798+08:00[Asia/Shanghai],2023-05-06T14:13:31.798+08:00[Asia/Shanghai]
#            - Cookie=no.,\d+
#            - Header=X-Request-Id,\d+
#            - Host=**,**.baidu.com # 以.作为分隔符
#            - Method=GET,POST
            - Path=/payment/get/{id} # 或者/payment/get/**
#            - Query=seq #表示请求必须由seq参数，不管有没有值（-Query=seq,\d+）
#            - RemoteAddr=127.0.0.1,192.168.1.1/24 # 后一个表示从1-24的地址段都可以

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/

  instance:
    hostname: cloud-gateway-service